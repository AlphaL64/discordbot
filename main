#!/usr/bin/python3

import discord
import os
import sys as sus
from threading import Thread

with open("TOKEN") as f:
	TOKEN = f.read(-1)

#from stayingalive import keep_alive

from botTalk import getresponse
# from stringOps import replace
from timecheck import TimeCheckLoop, AddNewReminder, SetReminderFunction
from quotes import getquote

from er import er as er
from er import ID10T_Exception
import random
from excFormatter import Format


#define the client
client = discord.Client(
	intents=discord.Intents.all()
)

def shell():
	while True:
		inp = input(">>> ")
		if inp == "exit": break
			
		os.system(inp)


#funcs
def GetChannel(name : str) -> discord.TextChannel:
	for channel in client.get_all_channels():
		if channel.name == name:
			return channel
	return None
def GetUser(name : str) -> discord.User:
	for user in client.get_all_members():
		if user.name == name:
			return user
	return None
def GetRole(name: str) -> discord.Role:
	pass
def GetEmote(name : str) -> discord.Emoji:
	for emote in client.emojis:
		if emote.name == name:
			return emote
	return None

def GetPing(name : str) -> str:
	return "<@!" + str(GetUser(name).id) + ">"
def GetChannelLink(name : str) -> str:
	return GetChannel(name).mention

async def SendLog(message):
	await GetChannel(BOT_LOG_CHANNEL).send(message)

async def PingBorse(channel):
	await channel.send(GetPing("Borsez"))

def exit():
	sus.setrecursionlimit(10**8)
	exit()


#constants
SELF_PING : str

INIT_SUCC_MSG = "online!"

BOT_LOG_CHANNEL = "bot-log"

REACTIONS = {}
REACTIONS_FILE = "reactions.txt"

COMMAND_PREFIX = "!"
HELP_MSG  = f"""
i comandi si scrivono con "{COMMAND_PREFIX}".
comandi:
	informazioni:
	help			- mi chiedo cosa faccia questo comando
	info			- informazioni sul di me

	funzionalità:
	echo msg		- ripete il messaggio, cancellando il tuo automaticamente
	remindme time [; msg]	- ti manderò un promemoria alla data richiesta. se non aggiungi un messaggio, ti manderò un link al tuo post
	quote			- frase ispirazionale generata al momento
	addreact nome link	- aggiunge una reazione con il nome dato ed il link tenor specificato. richiede l'approvazione di un moderatore
	
	utilità:
	ping [i]		- manda un ping a {"@"} "i" volte (una volta di default)
	sus				- sus

	debug:
	channel			- scrive il nome e l'ID del canale in cui sei
	user			- scrive nome e ID di chi ha scritto il messaggio
"""#qui non funzionano i ping perché il client non è ancora attivo
HELP_MSG_2 = f'i comandi si scrivono con "{COMMAND_PREFIX}". per una lista di comandi usa il comando "help"'
BOT_INFO = f"""
sono un bot programmato da @L, il proprietario del server, e sono fatto in Python usando l'API ufficiale di discord. sono appena stato creato quindi non ho molti comandi, ma sono in continua espansione. se hai suggerimenti, non esitare a mandarli in {"#"}!
"""#'''

MODS: list[discord.User] = []

SUPERUSER_PREFIX = "superuser "
SUPERUSER_IDS = [ 487601580539904000 ]
INVALID_SUPER_ID = [#messaggi da mandare quando l'ID che richiede permessi superuser non è valido
	"..._but nothing happened_",
	"eh! volevi!",
	f"ti credi intelligente? ascolto solo il mio padrone, <@!{SUPERUSER_IDS[0]}>!",
	"non sei degno di questo potere!",
	"https://tenor.com/view/sora-lella-tie-gif-7741962"
]

CHINESE_ANSWERS = [
	"哔哔生菜",
	"台湾是中国",
	"我爱中国",
	"你没有脑子",
	"请中青虫",
]
RISPOSTE_GRAZIE = [
	"di nulla",
	"non c'è di che",
	"è un piacere esserti utile",
	"a volte è dura essere benevolo quanto me",
	"non per vantarmi, ma merito decisamente la tua gratitudine",
	"di nulla, è più forte di me aiutarti",
	"dall'alto della mia magnanimità non avrei potuto non aiutarti",
]
PYTHON_ANSWERS = [
	"C++ > Python",
	"immagina un linguaggio in cui un errore di battitura ti viene fatto notare",
	"*laughs in clearly superior C++*",
	"_indentation_",
	"programming in Python be like:\nhttps://tenor.com/view/monsters-university-snail-going-on-my-way-omw-gif-5461800",
	"average Python fan:\nhttps://tenor.com/view/kerosene-kero-made-marcus-marcus-marcus-the-snail-he-goes-gif-22365259",
]
SUS_ANS = [
	"""
. 　　　。　　　　•　 　ﾟ　　。 　　.

　　　.　　　 　　.　　　　　。　　 。　. 　

.　　 。　　　　　 ඞ 。 . 　　 • 　　　　•

　　ﾟ　　 Red was not An Impostor.　 。　.

　　'　　　 1 Impostor remains 　 　　。

　　ﾟ　　　.　　　. ,　　　　.　 .
""",
	"""
➖➖🟥🟥🟥
➖🟥🟥🟦🟦🟦
🟥🟥🟥🟦🟦🟦
🟥🟥🟥🟦🟦🟦
🟥🟥🟥🟥🟥🟥
➖🟥🟥🟥🟥🟥
➖🟥🟥➖🟥🟥
➖🟥🟥➖🟥🟥""",
	"ඞ",
	"https://tenor.com/view/among-us-twerk-fast-ass-shake-gif-20107138",
	"https://tenor.com/view/sus-among-us-sussy-bakir-sussy-bakir-gif-24878782",
	"https://tenor.com/view/among-us-sus-default-dance-sussy-sussy-baka-gif-25130929",
	"https://tenor.com/view/when-the-impostor-is-sus-impostor-impostor-among-us-among-us-among-us-sus-gif-24712125",
]
	

#events
@client.event
async def on_ready():
	print(f'successfully logged in as {client.user}')
	#set this
	global SELF_PING
	SELF_PING = GetPing(client.user.name)
	from time import time
	random.seed(time())

	#aggiunge un collegamento a generale alle info del bot. non possiamo settarlo insieme al resto del messaggio perché il client non è attivo
	global BOT_INFO
	BOT_INFO = BOT_INFO.replace("#", GetChannelLink("bot-tests"))
	global HELP_MSG
	HELP_MSG = HELP_MSG.replace("@", GetPing("Borsez"))

	await SendLog(INIT_SUCC_MSG)
async def init(message: discord.Message):
	if MODS == []:
		for member in discord.utils.get(await message.guild.fetch_roles(), name="mod").members:
			if not member == client.user:
				MODS.append(member)
	#ENDIF

def updatereactions():
	global REACTIONS
	with open(REACTIONS_FILE) as rfile:
		import ast
		_ = "{" + "".join(rfile.readlines(-1)) + "}"
		REACTIONS = ast.literal_eval(_)

@client.event
async def on_message(message: discord.Message):
	#è
	try:
		if message.author.id == 886477323812110356:
			await message.channel.send(random.choice(["shut up", "dumbass", "fuck off", "i'll ban you", f"imagine being {message.author.mention}", "learn to write idiot", "", "i'll fucking turn you off if you don't shut up now", f"\"{message.author.mention}\" means 'idiot' in ancient Latin", "excuse me, i couldn't find any sign of intelligence in your message"]))
			return
		
		if isinstance(message.channel, discord.DMChannel):
			await respond_pm(message)
		else:
			async with message.channel.typing():
				if message.author == client.user:
					#se è il messaggio di inizio, inizializza il bot
					if message.content == INIT_SUCC_MSG:
						if message.channel.id == GetChannel(BOT_LOG_CHANNEL).id:
							await init(message)
					return
			
				print("received message:\n\t" + message.content + "\n")
			
				channel : discord.TextChannel = message.channel
				contl: str = message.content.lower()
				
				#if we get a ping we call cleverbot chat
				if SELF_PING in message.content or client.user.mention in message.content:
					#await channel.send(random.choice(PING_ANSWERS) if random.randint(0, len(PING_ANSWERS) + 1) != 0 else message.author.mention)
					print("\t" "initiating chat")
					msg: str = message.content
			
					#cambiamo dal ping a un nome generico, in modo che quella stringa di numeri non mandi in palla l'IA
					if client.user.mention in msg:
						msg = msg.replace(client.user.mention, "")
					else:	#if either of the two always
						msg = msg.replace(SELF_PING, "")
			
					response = await getresponse(msg)
					print("\t" "out of getresponse function")
			
					await message.reply(response, mention_author=False)
					return

				#these are absolutely necessary
				import re
				if re.search(u'[\u4e00-\u9fff]+', message.content) is not None:
					await channel.send(random.choice(CHINESE_ANSWERS))
				if "python" in contl:
					await channel.send(random.choice(PYTHON_ANSWERS))#TODO: più frasi belle lmao
				if "gatt" in contl:
					await PingBorse(channel)
				if "grazie" in contl:
					await message.reply(random.choice(RISPOSTE_GRAZIE))
				if "1984" in contl and not contl.startswith(COMMAND_PREFIX):
					await channel.send("https://c.tenor.com/KpzU7TGzfEcAAAAM/1984-skander.gif")
				if "chad" in contl and not contl.startswith(COMMAND_PREFIX):
					await channel.send("https://tenor.com/view/gigachad-chad-gif-20773266")
			
				#aiuto a parte il comando
				if contl in ["help", "aiuto"]:
					await channel.send(HELP_MSG_2)
			
				#se è un comando normale
				if message.content.startswith(COMMAND_PREFIX):
					channel: discord.TextChannel = message.channel
					msg: str = message.content[len(COMMAND_PREFIX):]	#teniamo solo il comando in se in modo che non dobbiamo preoccuparci del prefisso se cambia
					tokens = msg.split(" ")

					await NormalCommands(tokens, message, channel)
				#se è un comando superuser
				if message.content.startswith(SUPERUSER_PREFIX):
					await SuperuserCommands(message)
			#END WITH
	#invalid commando
	except ID10T_Exception:
		await channel.send(er())
	#un altro problemo
	except Exception as e:
		await channel.send(er())
		await SendLog(f"il seguente messaggio ha causato un problema:\n{message.content}\n\nl'errore:\n" + Format(e))

async def respond_pm(message: discord.Message):
	if message.author in MODS:
		if message.content.lower().startswith("y"):
			try:
				reaction = (await message.channel.fetch_message(message.reference.message_id)).content
				reaction = reaction.split("\n")		#TODO: rendere il messaggio cambiabile e farlo comunque funzionare
				if reaction[1] in REACTIONS.keys():
					await message.channel.send("è già stata aggiunta")
					return
				with open(REACTIONS_FILE, "a") as file:
					file.write(f'"{reaction[1]}" : "{reaction[2]}",\n')
			except Exception as e:
				import excFormatter
				print("error:\n" + excFormatter.Format(e))
			else:
				await message.channel.send("successfully added!")
				await SendLog("nuova reazione tenor aggiunta")
				updatereactions()
			

async def NormalCommands(tokens: list[str], message: discord.Message, channel: discord.TextChannel):
	match tokens[0]:
		case "help":
			await channel.send(HELP_MSG)
			await channel.send("reazioni:\n\t" + "\n\t".join(REACTIONS.keys()))
			
		case "info":
			await channel.send(BOT_INFO)
		
		case "echo":
			await channel.send("".join(tokens[1:]))
			await message.delete()
			
		case "ping":
			print("\t" "comedy genius")
			if len(tokens) == 1:	#no parameters
				await PingBorse(channel)
			else:
				tot = int(tokens[1])
				if tot < 1: raise
				for i in range(tot):
					await PingBorse(channel)

		case "quote":
			if len(tokens) == 1:	#no parameters
				await channel.send(getquote())
			else:
				tot = int(tokens[1])
				if tot < 1: raise
				for i in range(tot):
					await channel.send(getquote())
	
		case "remindme":
			#TODO
			pass

		case "user":
			await channel.send(f"{message.author.display_name} ({message.author.id})")
		case "channel":
			await channel.send(f"{message.channel} ({message.channel.id})")

		case "sus":
			await channel.send(random.choice(SUS_ANS))

		case "addreact":
			name, link = tokens[1], tokens[2]
			updatereactions()
			if name in REACTIONS.keys():
				await message.channel.send("ce n'è già una con quel nome")		#TODO: funny messaggio
				return
			for mod in MODS:
				await mod.send(f"{message.author.name} ha chiesto di aggiungere una reazione:\n{name}\n{link}")
				await mod.send("accetta? [y/n] (rispondi al primo messaggio)")

		case other:
			if other in REACTIONS:
				await channel.send(REACTIONS[tokens[0]])
			else:
				raise ID10T_Exception
#END commands
async def SuperuserCommands(message : discord.Message):
	try:
		print("\t" "in superuser function")

		channel: discord.TextChannel = message.channel
		msg: str = message.content[len(SUPERUSER_PREFIX):]

		if message.author.id not in SUPERUSER_IDS:
			await channel.send(random.choice(INVALID_SUPER_ID))
			await SendLog(f"{message.author} tried executing a superuser command")
			return
		
		print("\t" "executing superuser command")
		await SendLog(f"{message.author} executing superuser command:\n\t" + message.content)

		if msg == "reboot":
			await SendLog("restarting...")
			cmd = ["python3"] + sus.argv
			#something like execute new thing and close old one
			os.execv(sus.executable, cmd)
		elif msg == "shutdown":
			await SendLog("shutting down...")
			exit()
		elif msg.startswith("exec"):
			print("\t" "executing:\n\t" + msg[5:])
			exec(msg[5:])
			print("end of exec")
		elif msg.startswith("pm("):
			username = GetUser(msg[3:msg.index(",")])
			emssage = eval(msg[msg.index(",")+1:msg.index(")")])
			await pm(username, emssage)
		elif msg.startswith("ban"):
			await GetUser(msg[4:]).ban()
		elif msg.startswith("kick"):
			await GetUser(msg[5:]).kick()
		elif msg.startswith("shell "):
			os.system(msg[len("shell "):])

	except Exception as e:
		await SendLog(f"Errore nell'uso del comando superuser {msg}:\n" + Format(e))
#END superuser

async def pm(user, message):
	await user.send(message)


@client.event
async def on_member_join(member: discord.User):
	await GetChannel("generale").send("@everyone è arrivato " + member.mention)
@client.event
async def on_member_remove(member: discord.User):
	None()

#TODO: non funziona
# async def start_coros():
#     # ensure_future -> create_task in Python 3.7
#     tasks = [asyncio.ensure_future(coro()) for coro in (coro1, coro2)]
#     await asyncio.wait(tasks)
def SendReminder(user, message):
	import asyncio
	asyncio.run(GetChannel("promemoria").send(GetUser(user).mention + "\n" + message))


#main
import platform		#cpcls
os.system("cls" if platform.system() == "Windows" else "clear")

print("starting...")
# keep_alive()

try:
	SetReminderFunction(SendReminder)
	timecheckthread = Thread(target=TimeCheckLoop)
	timecheckthread.start()

	#main client
	client.run(TOKEN)
except Exception as e:
	import excFormatter
	from colorama import Fore
	print(Fore.RED + excFormatter.Format(e) + Fore.WHITE)
	exit()
